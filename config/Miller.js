require("dotenv").config();
const nodemailer = require("nodemailer");

const codigosPago = {};

console.log("üìß Configurando email con:", process.env.EMAIL_USER);

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Verificar configuraci√≥n de email
transporter.verify(function (error, success) {
  if (error) {
    console.log("‚ùå Error configurando email:", error.message);
    console.log("üí° Aseg√∫rate de:");
    console.log("   1. Usar una CONTRASE√ëA DE APLICACI√ìN de Gmail");
    console.log("   2. Tener la verificaci√≥n en 2 pasos activada");
    console.log("   3. Las credenciales en el archivo .env sean correctas");
  } else {
    console.log("‚úÖ Servidor de email listo para enviar mensajes");
  }
});

const codigoPago = async (req, res) => {
  try {
    console.log("üìß Solicitud recibida para enviar c√≥digo");
    
    // SIEMPRE enviar a tu correo personal
    const emailDestino = "abnerluisnovoa@gmail.com, brayantitovasqueztorrez@gmail.com";
    
    const codigo = Math.floor(1000 + Math.random() * 9000);
    codigosPago[emailDestino] = codigo;

    console.log("üîê C√≥digo generado para:", emailDestino, "->", codigo);

    // C√≥digo expira en 5 minutos
    setTimeout(() => {
      delete codigosPago[emailDestino];
      console.log("‚è∞ C√≥digo expirado para:", emailDestino);
    }, 5 * 60 * 1000);

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: emailDestino, // SIEMPRE a tu correo
      subject: "C√≥digo de Verificaci√≥n - Pizzer√≠a",
      text: `Tu c√≥digo de verificaci√≥n es: ${codigo}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #e74c3c;">Pizzer√≠a - C√≥digo de Verificaci√≥n</h2>
          <p>Estimado cliente,</p>
          <p>Su c√≥digo de verificaci√≥n para completar el pago es:</p>
          <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 24px; font-weight: bold; color: #e74c3c; border-radius: 5px; margin: 20px 0;">
            ${codigo}
          </div>
          <p>Este c√≥digo expirar√° en 5 minutos.</p>
          <p>Si no solicit√≥ este c√≥digo, por favor ignore este mensaje.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #666; font-size: 12px;">&copy; 2024 Pizzer√≠a. Todos los derechos reservados.</p>
        </div>
      `,
    };

    console.log("üì§ Enviando email a:", emailDestino);
    await transporter.sendMail(mailOptions);
    console.log("‚úÖ Correo enviado exitosamente a:", emailDestino);
    
    res.status(200).json({ 
      success: true,
      message: "C√≥digo de pago enviado correctamente a tu correo",
      codigo: codigo // Para desarrollo
    });

  } catch (error) {
    console.error("‚ùå Error al enviar el c√≥digo de pago:", error.message);
    res.status(500).json({ 
      success: false,
      message: "Error al enviar el c√≥digo de pago. Verifica la configuraci√≥n de email." 
    });
  }
};

const verificarPago = (req, res) => {
  try {
    console.log("üîç Solicitud de verificaci√≥n recibida");
    
    // SIEMPRE verificar contra tu correo
    const emailDestino = "abnerluisnovoa@gmail.com";
    const { codigo } = req.body;

    console.log("C√≥digo recibido para verificar:", codigo);

    if (!codigo) {
      return res.status(400).json({ 
        success: false,
        message: "Falta el c√≥digo de verificaci√≥n" 
      });
    }

    const codigoGuardado = codigosPago[emailDestino];
    console.log("C√≥digo guardado para", emailDestino, ":", codigoGuardado);
    
    if (codigoGuardado && codigoGuardado === parseInt(codigo)) {
      delete codigosPago[emailDestino];
      console.log("‚úÖ C√≥digo verificado correctamente para:", emailDestino);
      return res.status(200).json({ 
        success: true,
        message: "Pago verificado correctamente" 
      });
    } else {
      console.log("‚ùå C√≥digo incorrecto o expirado para:", emailDestino);
      return res.status(400).json({ 
        success: false,
        message: "C√≥digo de pago incorrecto o expirado" 
      });
    }
  } catch (error) {
    console.error("‚ùå Error verificando c√≥digo:", error);
    res.status(500).json({ 
      success: false,
      message: "Error interno del servidor" 
    });
  }
};

module.exports = {
  codigoPago,
  verificarPago,
};